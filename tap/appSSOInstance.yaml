#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:regexp", "regexp")
    
#@ def buildIdentityProviders():
    - name: dev-users
      internalUnsafe:
        users:
          - username: #@ data.values.devDefaultAccountUsername
            password: #@ data.values.devDefaultAccountPassword
            givenName: "John"
            familyName: "Doe"
            email: "johndoe@example.com"
            roles:
              - "customer"         
#@ end

#@ def getURLHostName(url):
#@   host = regexp.replace("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?", url, "$4")  
#@   return host          
#@ end

---
apiVersion: sso.apps.tanzu.vmware.com/v1alpha1
kind: AuthServer
metadata:
  name: appsso-acme-fitness
  namespace: #@ data.values.workloadNamespace
  labels:
    name: appsso-acme-fitness
    app: acme-fitness    
  annotations:
    sso.apps.tanzu.vmware.com/allow-client-namespaces: "*"
    sso.apps.tanzu.vmware.com/allow-unsafe-identity-provider: ""
    sso.apps.tanzu.vmware.com/allow-unsafe-issuer-uri: ""
spec:
  tls:
    issuerRef:
      name: letsencrypt-acme-prod
      kind: ClusterIssuer
  tokenSignature:
    signAndVerifyKeyRef:
      name: #@ 'appsso-acme-fitness' +"-signing-key"
  identityProviders: #@ buildIdentityProviders()
---
apiVersion: secretgen.k14s.io/v1alpha1
kind: RSAKey
metadata:
  name: #@ 'appsso-acme-fitness' + "-signing-key"
  namespace: #@ data.values.workloadNamespace
spec:
  secretTemplate:
    type: Opaque
    stringData:
      key.pem: $(privateKey)      
      pub.pem: $(publicKey)