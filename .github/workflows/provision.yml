name: Provision
on:
  workflow_dispatch:
    inputs: { }
  push:
    branches:
      - Azure
    paths:
      - 'terraform/**'
      - 'azure/builder.json'
      - 'azure/routes/**'
env:
  SPRING_APPS_SERVICE: ${{ secrets.TF_PROJECT_NAME }}-asa
  RESOURCE_GROUP: ${{ secrets.TF_PROJECT_NAME }}-grp
  CART_SERVICE_APP: cart-service
  IDENTITY_SERVICE_APP: identity-service
  ORDER_SERVICE_APP: order-service
  PAYMENT_SERVICE_APP: payment-service
  CATALOG_SERVICE_APP: catalog-service
  FRONTEND_APP: frontend
  KEY_VAULT: ${{ secrets.TF_PROJECT_NAME }}-keyvault
jobs:
  provision:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v3
      - name: Set up Credentials and Terraform Backend
        run: ../.github/scripts/prepare-configs.sh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          BACKEND_CONFIG: ${{ secrets.TF_BACKEND_CONFIG }}
      - name: Terraform Format
        run: terraform fmt -check
      - name: Terraform Init
        run: terraform init -backend-config=azurerm.tfbackend
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          terraform plan -input=false \
            -var "project_name=${{ secrets.TF_PROJECT_NAME}}" \
            -var "resource_group_location=${{ secrets.AZURE_LOCATION }}" \
            -var "sso-jwk-uri=${{ secrets.OIDC_JWK_SET_URI }}" \
            -var "sso-client-id=${{ secrets.OIDC_CLIENT_ID }}" \
            -var "sso-client-secret=${{ secrets.OIDC_CLIENT_SECRET }}" \
            -var "sso-issuer-uri=${{ secrets.OIDC_ISSUER_URI }}"
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -input=false \
            -var "project_name=${{ secrets.TF_PROJECT_NAME}}" \
            -var "resource_group_location=${{ secrets.AZURE_LOCATION }}" \
            -var "sso-jwk-uri=${{ secrets.OIDC_JWK_SET_URI }}" \
            -var "sso-client-id=${{ secrets.OIDC_CLIENT_ID }}" \
            -var "sso-client-secret=${{ secrets.OIDC_CLIENT_SECRET }}" \
            -var "sso-issuer-uri=${{ secrets.OIDC_ISSUER_URI }}"
      - name: Set up Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up Azure Spring Extension
        run: az extension add --name spring
      - name: Configure Spring Cloud Gateway
        working-directory: azure/routes
        run: ../../.github/scripts/gateway.sh
        env:
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          SPRING_APPS_SERVICE: ${{ env.SPRING_APPS_SERVICE }}
          IDENTITY_SERVICE_APP: ${{ env.IDENTITY_SERVICE_APP }}
          CART_SERVICE_APP: ${{ env.CART_SERVICE_APP }}
          ORDER_SERVICE_APP: ${{ env.ORDER_SERVICE_APP }}
          CATALOG_SERVICE_APP: ${{ env.CATALOG_SERVICE_APP }}
          FRONTEND_APP: ${{ env.FRONTEND_APP }}
      - name: Configure Identity Provider
        run: ../.github/scripts/identity-provider.sh
        env:
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          SPRING_APPS_SERVICE: ${{ env.SPRING_APPS_SERVICE }}
          IDENTITY_SERVICE_APP: ${{ env.IDENTITY_SERVICE_APP }}
          CART_SERVICE_APP: ${{ env.CART_SERVICE_APP }}
          ORDER_SERVICE_APP: ${{ env.ORDER_SERVICE_APP }}
          CATALOG_SERVICE_APP: ${{ env.CATALOG_SERVICE_APP }}
          FRONTEND_APP: ${{ env.FRONTEND_APP }}
          CLIENT_ID: ${{ secrets.OIDC_CLIENT_ID  }}
          KEY_VAULT: ${{ env.KEY_VAULT }}

