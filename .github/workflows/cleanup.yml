name: Cleanup
on:
  workflow_dispatch:
    inputs: { }

jobs:
  destory:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v3
      - name: Set up Credentials and Terraform Backend
        run: ../.github/scripts/prepare-configs.sh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          BACKEND_CONFIG: ${{ secrets.TF_BACKEND_CONFIG }}
      - name: Terraform Init
        run: terraform init -backend-config=azurerm.tfbackend
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        id: first-plan
        continue-on-error: true
        run: |
          terraform plan -destroy -input=false \
            -var "project_name=${{ secrets.TF_PROJECT_NAME}}" \
            -var "resource_group_location=${{ secrets.AZURE_LOCATION }}" \
            -var "sso-jwk-uri=${{ secrets.OIDC_JWK_SET_URI }}" \
            -var "sso-client-id=${{ secrets.OIDC_CLIENT_ID }}" \
            -var "sso-client-secret=${{ secrets.OIDC_CLIENT_SECRET }}" \
            -var "sso-issuer-uri=${{ secrets.OIDC_ISSUER_URI }}"
      - name: Terraform Apply
        if: steps.first-plan.outcome == 'success'
        id: first-apply
        continue-on-error: true
        run: |
          terraform apply -destroy -auto-approve -input=false \
            -var "project_name=${{ secrets.TF_PROJECT_NAME}}" \
            -var "resource_group_location=${{ secrets.AZURE_LOCATION }}" \
            -var "sso-jwk-uri=${{ secrets.OIDC_JWK_SET_URI }}" \
            -var "sso-client-id=${{ secrets.OIDC_CLIENT_ID }}" \
            -var "sso-client-secret=${{ secrets.OIDC_CLIENT_SECRET }}" \
            -var "sso-issuer-uri=${{ secrets.OIDC_ISSUER_URI }}"
      - name: Terraform Plan (Second Attempt, if the first one failed)
        if: steps.first-apply.outcome != 'success'
        id: second-plan
        continue-on-error: true
        run: |
          terraform plan -destroy -input=false \
            -var "project_name=${{ secrets.TF_PROJECT_NAME}}" \
            -var "resource_group_location=${{ secrets.AZURE_LOCATION }}" \
            -var "sso-jwk-uri=${{ secrets.OIDC_JWK_SET_URI }}" \
            -var "sso-client-id=${{ secrets.OIDC_CLIENT_ID }}" \
            -var "sso-client-secret=${{ secrets.OIDC_CLIENT_SECRET }}" \
            -var "sso-issuer-uri=${{ secrets.OIDC_ISSUER_URI }}"
      - name: Terraform Apply (Second Attempt, if the first one failed)
        if: steps.second-plan.outcome == 'success'
        id: second-apply
        continue-on-error: true
        run: |
          terraform apply -destroy -auto-approve -input=false \
            -var "project_name=${{ secrets.TF_PROJECT_NAME}}" \
            -var "resource_group_location=${{ secrets.AZURE_LOCATION }}" \
            -var "sso-jwk-uri=${{ secrets.OIDC_JWK_SET_URI }}" \
            -var "sso-client-id=${{ secrets.OIDC_CLIENT_ID }}" \
            -var "sso-client-secret=${{ secrets.OIDC_CLIENT_SECRET }}" \
            -var "sso-issuer-uri=${{ secrets.OIDC_ISSUER_URI }}"
      - name: Terraform Plan (Third Attempt, if the first one and second one failed)
        if: steps.first-apply.outcome != 'success' && steps.second-apply.outcome != 'success'
        id: third-plan
        run: |
          terraform plan -destroy -input=false \
            -var "project_name=${{ secrets.TF_PROJECT_NAME}}" \
            -var "resource_group_location=${{ secrets.AZURE_LOCATION }}" \
            -var "sso-jwk-uri=${{ secrets.OIDC_JWK_SET_URI }}" \
            -var "sso-client-id=${{ secrets.OIDC_CLIENT_ID }}" \
            -var "sso-client-secret=${{ secrets.OIDC_CLIENT_SECRET }}" \
            -var "sso-issuer-uri=${{ secrets.OIDC_ISSUER_URI }}"
      - name: Terraform Apply (Third Attempt, if the first one and second one failed)
        if: steps.third-plan.outcome == 'success'
        run: |
          terraform apply -destroy -auto-approve -input=false \
            -var "project_name=${{ secrets.TF_PROJECT_NAME}}" \
            -var "resource_group_location=${{ secrets.AZURE_LOCATION }}" \
            -var "sso-jwk-uri=${{ secrets.OIDC_JWK_SET_URI }}" \
            -var "sso-client-id=${{ secrets.OIDC_CLIENT_ID }}" \
            -var "sso-client-secret=${{ secrets.OIDC_CLIENT_SECRET }}" \
            -var "sso-issuer-uri=${{ secrets.OIDC_ISSUER_URI }}"

